import React, { useState } from "react";
import { DndContext, useDraggable, useDroppable } from "@dnd-kit/core";

const columnsData = {
  todo: { title: "A Fazer", items: ["Tarefa 1", "Tarefa 2"] },
  doing: { title: "Fazendo", items: ["Tarefa 3"] },
  done: { title: "Feito", items: ["Tarefa 4"] },
};

function Kanban() {
  const [columns, setColumns] = useState(columnsData);
  const [activeCard, setActiveCard] = useState(null);

  const handleDragEnd = (event) => {
    const { over, active } = event;
    if (!over) return;
    const fromColumnId = active.data.current.column;
    const toColumnId = over.id;

    if (fromColumnId !== toColumnId) {
      setColumns((prev) => {
        const fromItems = prev[fromColumnId].items.filter((i) => i !== active.id);
        const toItems = [...prev[toColumnId].items, active.id];
        return {
          ...prev,
          [fromColumnId]: { ...prev[fromColumnId], items: fromItems },
          [toColumnId]: { ...prev[toColumnId], items: toItems },
        };
      });
    }
  };

  return (
    <DndContext onDragEnd={handleDragEnd} onDragStart={(e) => setActiveCard(e.active.id)}>
      <div className="grid grid-cols-3 gap-4 p-4">
        {Object.entries(columns).map(([columnId, column]) => (
          <Column key={columnId} id={columnId} title={column.title} items={column.items} />
        ))}
      </div>
    </DndContext>
  );
}

function Column({ id, title, items }) {
  const { setNodeRef } = useDroppable({ id });
  return (
    <div ref={setNodeRef} className="bg-gray-100 p-4 rounded-xl shadow-md">
      <h2 className="font-bold text-lg mb-2">{title}</h2>
      {items.map((item) => (
        <Card key={item} id={item} column={id} />
      ))}
    </div>
  );
}

function Card({ id, column }) {
  const { attributes, listeners, setNodeRef, transform, isDragging } = useDraggable({ id, data: { column } });
  const style = {
    transform: transform ? `translate(${transform.x}px, ${transform.y}px)` : undefined,
    zIndex: isDragging ? 1000 : 0,
  };
  return (
    <div
      ref={setNodeRef}
      {...listeners}
      {...attributes}
      style={style}
      className="bg-white p-2 my-2 rounded shadow cursor-move"
    >
      {id}
    </div>
  );
}

export default Kanban;
